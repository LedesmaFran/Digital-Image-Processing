--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=9 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 21.1 cbx_cycloneii 2022:06:23:22:03:45:SJ cbx_lpm_add_sub 2022:06:23:22:03:45:SJ cbx_lpm_compare 2022:06:23:22:03:45:SJ cbx_lpm_decode 2022:06:23:22:03:40:SJ cbx_mgl 2022:06:23:22:04:21:SJ cbx_nadder 2022:06:23:22:03:45:SJ cbx_stratix 2022:06:23:22:03:45:SJ cbx_stratixii 2022:06:23:22:03:45:SJ  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_tsa
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode617w[1..0]	: WIRE;
	w_anode626w[3..0]	: WIRE;
	w_anode643w[3..0]	: WIRE;
	w_anode653w[3..0]	: WIRE;
	w_anode663w[3..0]	: WIRE;
	w_anode673w[3..0]	: WIRE;
	w_anode683w[3..0]	: WIRE;
	w_anode693w[3..0]	: WIRE;
	w_anode703w[3..0]	: WIRE;
	w_anode715w[1..0]	: WIRE;
	w_anode722w[3..0]	: WIRE;
	w_anode733w[3..0]	: WIRE;
	w_anode743w[3..0]	: WIRE;
	w_anode753w[3..0]	: WIRE;
	w_anode763w[3..0]	: WIRE;
	w_anode773w[3..0]	: WIRE;
	w_anode783w[3..0]	: WIRE;
	w_anode793w[3..0]	: WIRE;
	w_data615w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[8..0] = eq_wire[8..0];
	eq_wire[] = ( ( w_anode793w[3..3], w_anode783w[3..3], w_anode773w[3..3], w_anode763w[3..3], w_anode753w[3..3], w_anode743w[3..3], w_anode733w[3..3], w_anode722w[3..3]), ( w_anode703w[3..3], w_anode693w[3..3], w_anode683w[3..3], w_anode673w[3..3], w_anode663w[3..3], w_anode653w[3..3], w_anode643w[3..3], w_anode626w[3..3]));
	w_anode617w[] = ( (w_anode617w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode626w[] = ( (w_anode626w[2..2] & (! w_data615w[2..2])), (w_anode626w[1..1] & (! w_data615w[1..1])), (w_anode626w[0..0] & (! w_data615w[0..0])), w_anode617w[1..1]);
	w_anode643w[] = ( (w_anode643w[2..2] & (! w_data615w[2..2])), (w_anode643w[1..1] & (! w_data615w[1..1])), (w_anode643w[0..0] & w_data615w[0..0]), w_anode617w[1..1]);
	w_anode653w[] = ( (w_anode653w[2..2] & (! w_data615w[2..2])), (w_anode653w[1..1] & w_data615w[1..1]), (w_anode653w[0..0] & (! w_data615w[0..0])), w_anode617w[1..1]);
	w_anode663w[] = ( (w_anode663w[2..2] & (! w_data615w[2..2])), (w_anode663w[1..1] & w_data615w[1..1]), (w_anode663w[0..0] & w_data615w[0..0]), w_anode617w[1..1]);
	w_anode673w[] = ( (w_anode673w[2..2] & w_data615w[2..2]), (w_anode673w[1..1] & (! w_data615w[1..1])), (w_anode673w[0..0] & (! w_data615w[0..0])), w_anode617w[1..1]);
	w_anode683w[] = ( (w_anode683w[2..2] & w_data615w[2..2]), (w_anode683w[1..1] & (! w_data615w[1..1])), (w_anode683w[0..0] & w_data615w[0..0]), w_anode617w[1..1]);
	w_anode693w[] = ( (w_anode693w[2..2] & w_data615w[2..2]), (w_anode693w[1..1] & w_data615w[1..1]), (w_anode693w[0..0] & (! w_data615w[0..0])), w_anode617w[1..1]);
	w_anode703w[] = ( (w_anode703w[2..2] & w_data615w[2..2]), (w_anode703w[1..1] & w_data615w[1..1]), (w_anode703w[0..0] & w_data615w[0..0]), w_anode617w[1..1]);
	w_anode715w[] = ( (w_anode715w[0..0] & data_wire[3..3]), enable_wire);
	w_anode722w[] = ( (w_anode722w[2..2] & (! w_data615w[2..2])), (w_anode722w[1..1] & (! w_data615w[1..1])), (w_anode722w[0..0] & (! w_data615w[0..0])), w_anode715w[1..1]);
	w_anode733w[] = ( (w_anode733w[2..2] & (! w_data615w[2..2])), (w_anode733w[1..1] & (! w_data615w[1..1])), (w_anode733w[0..0] & w_data615w[0..0]), w_anode715w[1..1]);
	w_anode743w[] = ( (w_anode743w[2..2] & (! w_data615w[2..2])), (w_anode743w[1..1] & w_data615w[1..1]), (w_anode743w[0..0] & (! w_data615w[0..0])), w_anode715w[1..1]);
	w_anode753w[] = ( (w_anode753w[2..2] & (! w_data615w[2..2])), (w_anode753w[1..1] & w_data615w[1..1]), (w_anode753w[0..0] & w_data615w[0..0]), w_anode715w[1..1]);
	w_anode763w[] = ( (w_anode763w[2..2] & w_data615w[2..2]), (w_anode763w[1..1] & (! w_data615w[1..1])), (w_anode763w[0..0] & (! w_data615w[0..0])), w_anode715w[1..1]);
	w_anode773w[] = ( (w_anode773w[2..2] & w_data615w[2..2]), (w_anode773w[1..1] & (! w_data615w[1..1])), (w_anode773w[0..0] & w_data615w[0..0]), w_anode715w[1..1]);
	w_anode783w[] = ( (w_anode783w[2..2] & w_data615w[2..2]), (w_anode783w[1..1] & w_data615w[1..1]), (w_anode783w[0..0] & (! w_data615w[0..0])), w_anode715w[1..1]);
	w_anode793w[] = ( (w_anode793w[2..2] & w_data615w[2..2]), (w_anode793w[1..1] & w_data615w[1..1]), (w_anode793w[0..0] & w_data615w[0..0]), w_anode715w[1..1]);
	w_data615w[2..0] = data_wire[2..0];
END;
--VALID FILE
